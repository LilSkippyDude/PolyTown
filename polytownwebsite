<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PolyTown - The Strongest Nation in Polynomers</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Cinzel:wght@400;700&family=Raleway:wght@300;400;600&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Raleway', sans-serif;
            overflow: hidden;
            height: 100vh;
            background: linear-gradient(to bottom, #2A0845, #6441A5, #ff7e5f, #feb47b, #ffb86c);
            position: relative;
        }
        
        .scene {
            height: 100vh;
            width: 100%;
            position: relative;
            overflow: hidden;
        }
        
        .sun {
            position: absolute;
            width: 150px;
            height: 150px;
            background: radial-gradient(circle, #ff9e5f 0%, rgba(255, 158, 95, 0) 70%);
            border-radius: 50%;
            top: 15%;
            left: 75%;
            filter: blur(5px);
            box-shadow: 0 0 60px 30px rgba(255, 158, 95, 0.7);
            animation: pulsate 4s infinite alternate;
            z-index: 2;
        }
        
        @keyframes pulsate {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(1.1); opacity: 0.9; }
        }
        
        .desert {
            position: absolute;
            bottom: 0;
            width: 100%;
            height: 35%;
            background: linear-gradient(to bottom, #e1c16e, #d4a76a);
            z-index: 4;
        }
        
        .pyramid-container {
            position: absolute;
            bottom: 35%;
            left: 50%;
            transform: translateX(-50%);
            z-index: 3;
            width: 500px;
            height: 400px;
        }
        
        .pyramid {
            position: absolute;
            bottom: 0;
            left: 0;
            width: 0;
            height: 0;
            border-left: 250px solid transparent;
            border-right: 250px solid transparent;
            border-bottom: 400px solid #d4a76a;
            filter: drop-shadow(0px 10px 15px rgba(0, 0, 0, 0.4));
        }
        
        .pyramid-cap {
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 30px solid transparent;
            border-right: 30px solid transparent;
            border-bottom: 40px solid #fff;
            filter: drop-shadow(0px 5px 10px rgba(255, 255, 255, 0.7));
            z-index: 3;
        }
        
        .message-container {
            position: absolute;
            top: 40%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            width: 80%;
            max-width: 900px;
            z-index: 100;
        }
        
        .title {
            font-family: 'Cinzel', serif;
            font-size: 4rem;
            font-weight: 700;
            color: #fff;
            text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.6);
            margin-bottom: 1.5rem;
            animation: floatTitle 3s ease-in-out infinite;
        }
        
        @keyframes floatTitle {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(5px); }
        }
        
        .subtitle {
            font-family: 'Raleway', sans-serif;
            font-size: 1.8rem;
            color: #fff;
            text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.6);
            margin-bottom: 1.5rem;
        }
        
        .pyramid-phrases {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 5;
            pointer-events: none;
        }
        
        .phrase {
            position: absolute;
            font-family: 'Cinzel', serif;
            font-size: 1rem;
            color: #fff;
            text-shadow: 0px 0px 4px rgba(0, 0, 0, 0.8);
            opacity: 0;
            animation: phraseAppear 3s ease-in-out forwards;
        }
        
        @keyframes phraseAppear {
            0% { opacity: 0; transform: scale(0.8); }
            20% { opacity: 1; transform: scale(1); }
            80% { opacity: 1; transform: scale(1); }
            100% { opacity: 0; transform: scale(1.1); }
        }
        
        .buttons {
            display: flex;
            justify-content: center;
            position: absolute;
            bottom: 15%;
            left: 50%;
            transform: translateX(-50%);
            z-index: 101;
        }
        
        .btn {
            background: linear-gradient(to right, #e1c16e, #d4a76a);
            border: none;
            padding: 1.2rem 2.5rem;
            font-family: 'Raleway', sans-serif;
            font-size: 1.2rem;
            color: #2A0845;
            font-weight: 600;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.5s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
            text-decoration: none;
        }
        
        .btn:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);
            background: linear-gradient(to right, #d442f5, #b066e8);
            color: #fff;
        }
        
        .stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }
        
        .star {
            position: absolute;
            background-color: #fff;
            border-radius: 50%;
            filter: blur(1px);
            animation: twinkle 3s infinite ease-in-out;
        }
        
        @keyframes twinkle {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 1; }
        }

        .shooting-star {
            position: absolute;
            width: 3px;
            height: 3px;
            background-color: #fff;
            border-radius: 50%;
            z-index: 2;
            filter: blur(0.5px);
            pointer-events: none;
        }

        .info-panel {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            padding: 15px 20px;
            color: white;
            max-width: 300px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            opacity: 0.7;
            z-index: 50;
        }
        
        .info-panel:hover {
            opacity: 1;
            transform: translateY(-5px);
        }
        
        .info-title {
            font-family: 'Cinzel', serif;
            font-weight: 700;
            margin-bottom: 10px;
            text-align: center;
            border-bottom: 1px solid rgba(255,255,255,0.3);
            padding-bottom: 5px;
        }
        
        .pyramid-roles {
            position: absolute;
            left: 20px;
            bottom: 20px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            padding: 15px;
            color: white;
            max-width: 300px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            opacity: 0.7;
            z-index: 50;
        }
        
        .pyramid-roles:hover {
            opacity: 1;
            transform: translateY(-5px);
        }
        
        .role {
            margin-bottom: 8px;
        }
        
        .role-title {
            font-weight: 600;
            color: #e1c16e;
        }
        
        .houses-container {
            position: absolute;
            bottom: 35%;
            width: 100%;
            height: 80px;
            z-index: 5;
        }
        
        .house {
            position: absolute;
            background: linear-gradient(to bottom, #d4a2a8 10%, #c49b63 25%, #a37a42 100%);
            z-index: 5;
            border-radius: 2px 2px 0 0;
        }
    </style>
</head>
<body>
    <div class="scene">
        <div class="sun"></div>
        
        <div class="pyramid-container">
            <div class="pyramid"></div>
            <div class="pyramid-cap"></div>
            <div class="pyramid-phrases" id="pyramid-phrases"></div>
        </div>
        
        <div class="desert"></div>
        
        <div class="houses-container" id="houses-container"></div>
        
        <div class="message-container">
            <h1 class="title">POLYTOWN</h1>
            <h2 class="subtitle">The Strongest Nation in Polynomers</h2>
        </div>
        
        <div class="buttons">
            <a href="https://discord.gg/UMPzNSs4" target="_blank" class="btn">Join The Pitizens</a>
        </div>
        
        <div class="info-panel">
            <div class="info-title">OUR BELIEFS</div>
            <p>We will fight for each other, as we are united through the pyramid which represents our greatness. We all have a deep admiration for each other, as we have all found our place in the world, within the tax free, huge, full of food, full of rights society that PolyTown builds for all of us.</p>
        </div>
        
        <div class="pyramid-roles">
            <div class="info-title">THE PYRAMID ROLES</div>
            <div class="role">
                <span class="role-title">The Grand Pharaohs:</span> Control most things, lead us towards the bright future.
            </div>
            <div class="role">
                <span class="role-title">The Pharaohs:</span> Build large structures and have political power.
            </div>
            <div class="role">
                <span class="role-title">The Assistant Builders:</span> Help with anything that a pharaoh wants.
            </div>
            <div class="role">
                <span class="role-title">Pitizen:</span> The foundation of our society.
            </div>
        </div>
    </div>

    <script>
        // Create stars
        function createStars() {
            const stars = document.createElement('div');
            stars.classList.add('stars');
            document.querySelector('.scene').appendChild(stars);
            
            for (let i = 0; i < 200; i++) {
                const star = document.createElement('div');
                star.classList.add('star');
                
                // Random star size
                const size = Math.random() * 2 + 1;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                
                // Random position
                star.style.top = `${Math.random() * 60}%`;
                star.style.left = `${Math.random() * 100}%`;
                
                // Random animation delay
                star.style.animationDelay = `${Math.random() * 3}s`;
                
                stars.appendChild(star);
            }
        }
        
        createStars();
        
        // Shooting stars without trail
        function createShootingStar() {
            if (Math.random() < 0.1) { // 10% chance every 5 seconds
                const shootingStar = document.createElement('div');
                shootingStar.classList.add('shooting-star');
                
                // Start position (always above the pyramid)
                const startX = Math.random() * 30 + 35; // 35-65% of screen width
                shootingStar.style.top = "10%";
                shootingStar.style.left = `${startX}%`;
                
                document.querySelector('.scene').appendChild(shootingStar);
                
                // Animation parameters
                const duration = Math.random() * 2000 + 2000; // 2-4 seconds
                const endX = startX + (Math.random() * 30 - 15); // curve direction
                const endY = Math.random() * 30 + 40; // end somewhere in the middle-bottom
                const midX = (startX + endX) / 2 + (Math.random() * 10 - 5);
                const midY = (10 + endY) / 2;
                
                // Bezier curve animation
                let start = null;
                function animate(timestamp) {
                    if (!start) start = timestamp;
                    const progress = (timestamp - start) / duration;
                    
                    if (progress < 1) {
                        // Quadratic bezier curve
                        const x = Math.pow(1 - progress, 2) * startX + 
                                 2 * (1 - progress) * progress * midX + 
                                 Math.pow(progress, 2) * endX;
                        
                        const y = Math.pow(1 - progress, 2) * 10 + 
                                 2 * (1 - progress) * progress * midY + 
                                 Math.pow(progress, 2) * endY;
                        
                        shootingStar.style.left = `${x}%`;
                        shootingStar.style.top = `${y}%`;
                        
                        // Fade out near the end
                        if (progress > 0.7) {
                            const fadeOpacity = (1 - progress) / 0.3;
                            shootingStar.style.opacity = fadeOpacity;
                        }
                        
                        requestAnimationFrame(animate);
                    } else {
                        // Final blink
                        shootingStar.style.opacity = "1";
                        shootingStar.style.transform = "scale(2)";
                        setTimeout(() => {
                            shootingStar.remove();
                        }, 100);
                    }
                }
                
                requestAnimationFrame(animate);
            }
        }
        
        // Check for shooting star every 5 seconds
        setInterval(createShootingStar, 5000);
        
        // Create houses with full gradient
        function createHouses() {
            const container = document.getElementById('houses-container');
            const usedSpaces = [];
            const screenWidth = window.innerWidth;
            const houseCount = Math.floor(screenWidth / 120); // Fewer houses, but bigger
            
            for (let i = 0; i < houseCount; i++) {
                let validPosition = false;
                let left, width, height;
                let attempts = 0;
                
                // Try to find a valid position (not overlapping)
                while (!validPosition && attempts < 50) {
                    width = Math.floor(Math.random() * 30) + 30; // 30-60px wide (bigger)
                    height = Math.floor(Math.random() * 25) + 35; // 35-60px tall (bigger)
                    left = Math.floor(Math.random() * (screenWidth - width));
                    
                    // Check if this position overlaps with any existing house
                    validPosition = true;
                    for (const space of usedSpaces) {
                        // Add some margin between houses (10px)
                        if (
                            left < space.right + 10 && 
                            left + width + 10 > space.left
                        ) {
                            validPosition = false;
                            break;
                        }
                    }
                    
                    attempts++;
                }
                
                if (validPosition) {
                    // Add this space to used spaces
                    usedSpaces.push({
                        left: left,
                        right: left + width
                    });
                    
                    // Create the house
                    const house = document.createElement('div');
                    house.classList.add('house');
                    house.style.left = `${left}px`;
                    house.style.bottom = `0`;
                    house.style.width = `${width}px`;
                    house.style.height = `${height}px`;
                    
                    container.appendChild(house);
                }
            }
        }
        
        createHouses();
        
        // Function to check if element positions overlap
        function doElementsOverlap(elem1, elem2) {
            const rect1 = elem1.getBoundingClientRect();
            const rect2 = elem2.getBoundingClientRect();
            
            return !(
                rect1.right < rect2.left || 
                rect1.left > rect2.right || 
                rect1.bottom < rect2.top || 
                rect1.top > rect2.bottom
            );
        }
        
        // Create pyramid phrases avoiding text overlap
        const phrases = [
            "Skippy Reigns",
            "Divine Rule",
            "Eternal Glory",
            "Boundless Wisdom",
            "Majestic Power",
            "Supreme Leader",
            "Radiant Light",
            "Mighty Skippy",
            "Powerful Force",
            "Unmatched Brilliance",
            "Loyal Followers",
            "Glorious PolyTown",
            "Infinite Might",
            "Abundant Prosperity",
            "Pyramid Power",
            "Golden Dynasty",
            "Magnificent Vision",
            "Exceptional Leadership",
            "Inspired Genius",
            "Blessed Nation",
            "Skippy's Triumph",
            "Profound Excellence",
            "Righteous Kingdom",
            "Legendary Ruler",
            "Exalted One",
            "Astounding Vision",
            "Magnificent PolyTown",
            "Limitless Potential",
            "Brilliant Mind",
            "Phenomenal Success"
        ];
        
        function createPyramidPhrase() {
            const container = document.getElementById('pyramid-phrases');
            const phrase = document.createElement('div');
            phrase.classList.add('phrase');
            
            // Random phrase
            const randomIndex = Math.floor(Math.random() * phrases.length);
            phrase.innerText = phrases[randomIndex];
            
            // Position within the pyramid
            const pyramidWidth = 500;
            const pyramidHeight = 400;
            
            // Calculate a position that ensures the phrase is within the pyramid shape
            const yPercent = Math.random() * 70 + 10; // 10-80% of height
            const yPos = pyramidHeight * (yPercent / 100);
            
            // X position depends on Y to stay within pyramid shape
            const maxWidthAtY = (pyramidWidth * (1 - yPos / pyramidHeight));
            const xPos = (pyramidWidth - maxWidthAtY) / 2 + Math.random() * maxWidthAtY;
            
            phrase.style.left = `${xPos}px`;
            phrase.style.top = `${yPos}px`;
            
            // Temporarily add to check overlaps
            container.appendChild(phrase);
            
            // Check for overlaps with important elements
            const messageContainer = document.querySelector('.message-container');
            const infoPanel = document.querySelector('.info-panel');
            const pyramidRoles = document.querySelector('.pyramid-roles');
            const buttons = document.querySelector('.buttons');
            
            // Check if phrase overlaps with any important elements
            if (
                doElementsOverlap(phrase, messageContainer) ||
                doElementsOverlap(phrase, infoPanel) ||
                doElementsOverlap(phrase, pyramidRoles) ||
                doElementsOverlap(phrase, buttons)
            ) {
                // Destroy immediately if overlap
                phrase.remove();
            } else {
                // Otherwise keep it for the animation duration
                setTimeout(() => {
                    phrase.remove();
                }, 3000);
            }
        }
        
        // Create a new phrase every 1-3 seconds
        function scheduleNextPhrase() {
            const delay = Math.random() * 2000 + 1000;
            setTimeout(() => {
                createPyramidPhrase();
                scheduleNextPhrase();
            }, delay);
        }
        
        scheduleNextPhrase();
        
        // Handle window resize
        window.addEventListener('resize', () => {
            // Clear and recreate houses on resize
            const container = document.getElementById('houses-container');
            container.innerHTML = '';
            createHouses();
        });
    </script>
</body>
</html>
